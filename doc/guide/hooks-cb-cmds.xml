<!--
 - Copyright (C) 2019 Internet Systems Consortium, Inc. ("ISC")
 -
 - This Source Code Form is subject to the terms of the Mozilla Public
 - License, v. 2.0. If a copy of the MPL was not distributed with this
 - file, you can obtain one at http://mozilla.org/MPL/2.0/.
-->

    <section xml:id="cb-cmds-library">
      <title>cb_cmds: Configuration Backend Commands</title>
      <para>
        This section describes the <command>cb_cmds</command> hooks library
        which is used to manage Kea servers' configurations in the Configuration
        Backends. The hooks library uses available CB implementations to
        perform CRUD operations on the data held in the respective Configuration
        Backends.
      </para>

      <para>This library is only available to ISC customers with a
      support contract.

      <note>
        <para>This library may only be loaded by the <command>kea-dhcp4</command>
        or the <command>kea-dhcp6</command> process.
        </para>
      </note>
      </para>

      <section>
        <title>Commands Structure</title>
        <para>There are 5 types of commands supported by this library:</para>
        <itemizedlist>
          <listitem><simpara><command>del</command> - delete selected object from the
          database,</simpara></listitem>
          <listitem><simpara><command>get</command> - fetch selected object from the
          database,</simpara></listitem>
          <listitem><simpara><command>get-all</command> - fetch all objects of the
          particular type from the database,</simpara></listitem>
          <listitem><simpara><command>list</command> - list all objects of the particular
          type from the database; brief information about the listed objects is
          returned, comparing to the output of <command>get-all</command>,</simpara>
          </listitem>
          <listitem><simpara><command>set</command> - creates or updates an object
          of the given type in the database.</simpara></listitem>
        </itemizedlist>

        <para>All commands accept optional <command>remote</command> map which selects
        the database instance to which the command refers. For example:
<screen>
{
    "command": "remote-subnet4-list",
    "arguments": {
        "remote": {
            "type": "mysql",
            "host": "192.0.2.33",
            "port": 3302
        }
    }
}
</screen>
        </para>
        <para>
          selects the MySQL database running on host 192.0.2.33 and port 3302 to
          fetch the list of subnets from. All parameters in the
          <command>remote</command> are optional. The <command>port</command>
          parameter can be only specified in conjuction with the
          <command>host</command>. If no parameters in the <command>remote</command>
          parameter are to be specified, the parameter should be omitted. In this
          case the server will use the first backend listed in the
          <command>config-control</command> map within the configuration of the
          server receiving the command.
        </para>

        <note>
          <para>
            In Kea 1.6.0 beta release it is possible to configure Kea instance to
            use only one configuration backend with the <command>config-control</command>
            parameter. Therefore, in this release the <command>remote</command>
            parameter is redundant in the commands supported by this library.
          </para>
        </note>

      </section>

      <section xml:id="cb-cmds4">
        <title>Control Commands for DHCPv4 Servers</title>
        <para>The following commands are supported by the <command>cb_cmds</command>
        hooks library to manage the configuration information in the configuration
        backends.</para>

        <section xml:id="command-remote-global-parameter4-del">
          <title>remote-global-parameter4-del</title>
          <para>This command is used to delete a global DHCPv4 parameter from the
          configuration database. When the parameter is deleted from the database
          the server will use the value specified in the configuration file or
          a default value, if the parameter is not specified in the configuration
          file.</para>
          <para>The following command attempts to delete the
          <command>renew-timer</command> parameter from the database:
          <screen>
{
    "command": "remote-global-parameter4-del",
    "arguments": {
        "parameters": [ "renew-timer" ],
        "remote": {
            "type": "mysql"
         }
    }
}
          </screen>
          </para>
        </section>

        <section xml:id="command-remote-global-parameter4-get">
          <title>remote-global-parameter4-get</title>
          <para>This command is used to fetch a global DHCPv4 parameter from the
          configuration database.</para>
          <para>The following commands attempt to fetch the
          <command>boot-file-name</command> parameter from the database:
          <screen>
{
    "command": "remote-global-parameter4-get",
    "arguments": {
        "parameters": [ "boot-file-name" ],
         "remote": {
             "type": "mysql"
         }
    }
}
          </screen>
          </para>
          <para>
            The returned value may have one of 4 types: string, integer, real
            or boolean. In case of the <command>boot-file-name</command> the
            string value is returned, e.g.:
            <screen>
{
    "result": 0,
    "text": "1 DHCPv4 global parameter found.",
    "arguments": {
        "parameters": {
            "boot-file-name": "/dev/null",
            "metadata": {
                "server-tag": "all"
            }
        },
        "count": 1
    }
}
            </screen>
          </para>

          <para>
            The example response for an integer value is:
            <screen>
{
    "result": 0,
    "text": "1 DHCPv4 global parameter found.",
    "arguments": {
        "parameters": {
            "renew-timer": 2000,
            "metadata": {
                "server-tag": "all"
            }
        },
        "count": 1
    }
}
            </screen>
          </para>

          <para>
            The integer value:
            <screen>
{
    "result": 0,
    "text": "1 DHCPv4 global parameter found.",
    "arguments": {
        "parameters": {
            "t1-percent": 0.85,
            "metadata": {
                "server-tag": "all"
            }
        },
        "count": 1
    }
}
            </screen>
          </para>

          <para>
            Finally, the boolean value:
            <screen>
{
    "result": 0,
    "text": "1 DHCPv4 global parameter found.",
    "arguments": {
        "parameters": {
            "match-client-id": true,
            "metadata": {
                "server-tag": "all"
            }
        },
        "count": 1
    }
}
            </screen>
          </para>
        </section>

        <section xml:id="command-remote-global-parameter4-get-all">
          <title>remote-global-parameter4-get-all</title>
          <para>This command is used to fetch all global DHCPv4 parameters from
          the database. It includes no arguments besides an optional
          <command>remote</command> argument.</para>
        </section>

        <section xml:id="command-remote-global-parameter4-set">
          <title>remote-global-parameter4-set</title>
          <para>This command is used to create global DHCPv4 parameters in the database.
          If any of the parameters parameter already exists, its value is replaced
          as a result of this command. It is possible to set multiple parameters within
          a single command, each having one of the 4 types: a string, integer, real
          and boolean.
          <screen>
{
    "command": "remote-global-parameter4-set"
    "arguments": {
        "parameters": {
            "boot-file-name": "/dev/null",
            "renew-timer": 2000,
            "t1-percent": 0.85,
            "match-client-id": true
        },
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
          <para>
            If any of the parameters is not supported by the DHCPv4 server or its
            type doesn't match, an error is returned.
          </para>
        </section>

        <section xml:id="command-remote-network4-del">
          <title>remote-network4-del</title>
          <para>This command is used to delete IPv4 shared network from the database.
          The optional parameter <command>subnets-action</command> specifies whether
          the subnets belonging to the deleted shared network should be also deleted
          or preserved. The <command>subnets-action</command> defaults to
          <command>keep</command>, which preserves the subnets. If this parameter
          is set to <command>delete</command>, the subnets are deleted along with
          the shared network. For example:
          <screen>
{
    "command": "remote-network4-del",
    "arguments": {
        "shared-networks": [ {
            "name": "level3"
        } ],
        "subnets-action": "keep",
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
            deletes the "level3" shared network but preserves the subnets, which
            are disassociated from the deleted shared network and become global.
          </para>
        </section>

        <section xml:id="command-remote-network4-get">
          <title>remote-network4-get</title>
          <para>This command is used to retrieve information about the IPv4 shared
          network. The optional parameter <command>subnets-include</command> controls
          whether the subnets should be returned together with the shared network
          information. This parameter defaults to <command>no</command> which
          instructs to not return the subnets. If this parameter is set to
          <command>full</command>, the subnets are returned together with the
          shared network.</para>
          <para>
            The following command fetches the subnet "level3" and all subnets
            belonging to it:
            <screen>
{
    "command": "remote-network4-get",
    "arguments": {
        "shared-networks": [ {
            "name": "level3"
        } ],
        "subnets-include": "full",
        "remote": {
            "type": "mysql"
        }
    }
}
            </screen>
          </para>
        </section>

        <section xml:id="command-remote-network4-list">
          <title>remote-network4-list</title>
          <para>This command is used to list all IPv4 shared networks in the
          particular database. The returned information about each shared network
          is brief, i.e. it merely contains shared network name and the metadata
          for each shared network. In order to fetch the detailed information
          about the selected shared network, use the <command>remote-network4-get</command>.
          </para>
          <para>
            The <command>remote-network4-list</command> takes no argument except
            the optional <command>remote</command> map.
          </para>
        </section>

        <section xml:id="command-remote-network4-set">
          <title>remote-network4-set</title>
          <para>This command creates a new IPv4 shared network or replaces an existing
          shared network in the database. The structure of the shared network information
          is the same as in the Kea configuration file (see <xref linkend="shared-network4"/>),
          with the exception that the <command>subnet4</command> parameter is not allowed
          in the shared network specification. The reason for this is that the
          <command>remote-network4-set</command> is not meant to manage the subnets
          within the shared network. It is merely used to manage shared network specific
          parameters and DHCP options. In order to associate and disassociate the
          subnets with the shared networks the <command>remote-subnet4-set</command>
          command is used.
          </para>
          <para>
            The following command adds the shared network "level3" to the database:
            <screen>
{
    "command": "remote-network4-set",
    "arguments": {
        "shared-networks": [ {
            "name": "level3",
            "interface": "eth0",
            "option-data": [ {
                "name": "log-servers",
                "data": "1.2.3.4"
            } ],
        } ],
        "remote": {
            "type": "mysql"
        }
    }
}
            </screen>
          </para>
          <para>
            This command includes the <command>interface</command> parameters which sets
            the shared network level interface name. Remaining shared network level
            parameters, which are not specified with the command, will be marked as
            "unspecified" in the database. The DHCP server will use the global values
            for those parameters or, if global values are not specified, the default
            values will be used.
          </para>

          <note>
            <para>
              Same as for other "set" commands, this command replaces the entire
              information about the given shared network in the database if this
              shared network already exists. Therefore, when sending this command,
              make sure to always include all parameters that must be specified for
              the updated shared network instance. Any unspecified parameter will
              be marked unspecified in the database, even if its value was present
              prior to sending this command.
            </para>
          </note>
        </section>

        <section xml:id="command-remote-option-def4-del">
          <title>remote-option-def4-del</title>
          <para>This command is used to delete DHCPv4 option definition from the
          database. The option definition is identified by an option code and
          option space. For example:
          <screen>
{
    "command": "remote-option-def4-del",
    "arguments": {
        "option-defs": [ {
            "code": 1,
            "space": "isc"
        } ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
             deletes the definition of the option having the code of 1 and
             belonging to the option space "isc". The top level option space
             where standard DHCPv4 options belong is called "dhcp4".
          </para>
        </section>

        <section xml:id="command-remote-option-def4-get">
          <title>remote-option-def4-get</title>
          <para>This comamnd is used to fetch a specified DHCPv4 option
          definition from the database. The option definition is identified
          by option code and option space. The top level option space
          where DHCPv4 standard options belong is called "dhcp4".
          </para>
          <para>The following command retrieves an option definition
          having the code of 1 and belonging to option space "isc":
          <screen>
{
    "command": "remote-option-def4-get"
    "arguments": {
        "option-defs": [ {
            "code": 1,
            "space": "isc"
        } ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
        </section>

        <section xml:id="command-remote-option-def4-get-all">
          <title>remote-option-def4-get-all</title>
          <para>This command is used to fetch all DHCPv4 option definitions
          from the database. It takes no arguments except an optional
          <command>remote</command> map.</para>
        </section>

        <section xml:id="command-remote-option-def4-set">
          <title>remote-option-def4-set</title>
          <para>This command creates a new DHCPv4 option definition or
          replaces an existing option definition in the database. The structure
          of the option definition information is the same as in the Kea
          configuration file (see <xref linkend="dhcp4-custom-options"/>).
          For example:
          <screen>
{
    "command": "remote-option-def4-set",
    "arguments": {
        "option-defs": [
            {
                "name": "foo",
                "code": 222,
                "type": "uint32",
                "array": false,
                "record-types": "",
                "space": "dhcp4",
                "encapsulate": ""
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
        </section>

        <section xml:id="command-remote-option4-global-del">
          <title>remote-option4-global-del</title>
          <para>This command is used to delete global DHCPv4 option from the database.
          The option is identified by an option code and option space. For example:
          <screen>
{
    "command": "remote-option4-global-del",
    "arguments": {
        "options": [
            {
                "code": 5
                "space": "dhcp4"
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
          <para>
            The "dhcp4" is the top level option space where the standard DHCPv4
            options belong.
          </para>
        </section>

        <section xml:id="command-remote-option4-global-get">
          <title>remote-option4-global-get</title>
          <para>This command is used to fetch a global DHCPv4 option from the
          database. The option is identified by code and option space. The top
          level option space where DHCPv4 standard options belong is called
          "dhcp4".
          </para>
          <para>
            The following command retrieves the "Domain Name" (code 5) option:
{
    "command": remote-option4-global-get",
    "arguments": {
        "options": [
            {
                "code": 5,
                "space": "dhcp4"
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </para>
        </section>

        <section xml:id="command-remote-option4-global-get-all">
          <title>remote-option4-global-get-all</title>
          <para>This command is used to fetch all global DHCPv4 options from the
          database. It takes no arguments except the optional <command>remote</command>
          map.</para>
        </section>

        <section xml:id="command-remote-option4-global-set">
          <title>remote-option4-global-set</title>
          <para>This command creates a new global DHCPv4 option or replaces
          an existing option in the database. The structure of the option
          information is the same as in the Kea configuration file
          (see <xref linkend="dhcp4-std-options"/>). For example:
          <screen>
{
    "command": "remote-option4-global-set",
    "arguments": {
        "options": [
            {
                "name": "dns-servers",
                "data": "2001:db8:1::1"
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
          <para>
            Note that specifying an option name rather than option code only works
            reliably for the standard DHCP options. When specifying a value for the
            user defined DHCP option, the option code should be specified instead of
            the name. For example:
            <screen>
{
    "command": "remote-option4-global-set",
    "arguments": {
        "options": [
            {
                "code": 1,
                "space": "isc",
                "data": "2001:db8:1::1"
            }
        ]
    }
}
            </screen>
          </para>
        </section>

        <section xml:id="command-remote-subnet4-del-by-id">
          <title>remote-subnet4-del-by-id</title>
          <para>This is the first variant of the command used to delete an IPv4 subnet
          from the database. It uses subnet ID to identify the subnet.
          For example, in order to delete the subnet with ID of 5:
          <screen>
{
    "command": "remote-subnet4-del-by-id",
    "arguments": {
        "subnets": [ {
            "id": 5
        } ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
        </section>

        <section xml:id="command-remote-subnet4-del-by-prefix">
          <title>remote-subnet4-del-by-prefix</title>
          <para>This is the second variant of the command used to delete an IPv4 subnet
          from the database. It uses the subnet prefix to identify the subnet.
          For example:
          <screen>
{
    "command": "remote-subnet4-del-by-prefix",
    "arguments": {
        "subnets": [ {
            "subnet": "192.0.2.0/24"
        } ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
        </section>

        <section xml:id="command-remote-subnet4-get-by-id">
          <title>remote-subnet4-get-by-id</title>
          <para>This command is used to fetch a subnet with the specified ID from the
          database. For example:
          <screen>
{
    "command": "remote-subnet4-get-by-id",
    "arguments": {
        "subnets": [
            {
                "id": 5
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
        </section>

        <section xml:id="command-remote-subnet4-get-by-prefix">
          <title>remote-subnet4-get-by-prefix</title>
          <para>This command is used to fetch a subnet with the specified prefix from
          the database. For example:
          <screen>
{
    "command": "remote-subnet4-get-by-prefix",
    "arguments": {
        "subnets": [
            {
                "subnet": "192.0.2.0/24"
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
        </section>

        <section xml:id="command-remote-subnet4-list">
          <title>remote-subnet4-list</title>
          <para>This command is used to list all IPv4 subnets from the database.
          It takes no parameters except the optional <command>remote</command> map.
          The returned information about each subnet is limited to subnet identifier,
          prefix and associated shared network name. In order to retrieve full
          information about the selected subnet use the
          <command>remote-subnet4-get-by-id</command> or
          <command>remote-subnet4-get-by-prefix</command>.
          </para>
        </section>

        <section xml:id="command-remote-subnet4-set">
          <title>remote-subnet4-set</title>
          <para>This command is used to create a new subnet or replace an existing
          subnet in the database. Setting the subnet also associates or disassociates
          the subnet with/from a shared network.</para>

          <para>The structure of the subnet information is similar to the structure
          used in the configuration file (see <xref linkend="dhcp4-configuration"/>).
          The subnet information conveyed in the <command>remote-subnet4-set</command>
          must include additional parameter <command>shared-network-name</command>
          which indicates whether the subnet belongs to a shared network or not.
          </para>

          <para>Consider the following example:
          <screen>
{
    "command": "remote-subnet4-set",
    "arguments": {
        "subnets": [ {
            "id": 5,
            "subnet": "192.0.2.0/24",
            "shared-network-name": "level3",
            "pools": [ { "pool": "192.0.2.100-192.0.2.200" } ],
            "option-data": [ {
                "name": "routers",
                "data": "192.0.2.1"
            } ]
        } ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>

          <para>It creates the subnet and associates the subnet with the "level3"
          shared network. The "level3" must be created with the
          <command>remote-network4-set</command> prior to creating the subnet.
          </para>

          <para>If the created subnet must be global (not associated with any
          shared network), the <command>shared-network-name</command> must be
          explicitly set to <command>null</command>:
          <screen>
{
    "command": "remote-subnet4-set",
    "arguments": {
        "subnets": [ {
            "id": 5,
            "subnet": "192.0.2.0/24",
            "shared-network-name": null,
            "pools": [ { "pool": "192.0.2.100-192.0.2.200" } ],
            "option-data": [ {
                "name": "routers",
                "data": "192.0.2.1"
            } ]
        } ]
    }
}
          </screen>
          </para>

          <para>The subnet created in the previous example is replaced with the
          new subnet having the same parameters but becomes global.</para>

          <para>The <command>shared-network-name</command> parameter is mandatory
          for the <command>remote-subnet4-set</command> command.</para>

          <note>
            <para>
              Same as for other "set" commands, this command replaces the entire
              information about the particular subnet in the database, if the subnet
              information is already present. Therefore, when sending this command,
              make sure to always include all parameters that must be specified for
              the updated subnet instance. Any unspecified parameter will be marked
              as unspecified in the database, even if its value was present prior to
              sending the command.
            </para>
          </note>
        </section>

      </section>

      <section xml:id="cb-cmds6">
        <title>Control Commands for DHCPv6 Server</title>
        <para>TBD</para>
      </section>

    </section>
